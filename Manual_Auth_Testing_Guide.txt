> how do I manually test it as a human user?

> # üß™ Manual Testing Guide - Human User Experience

## üöÄ Step 1: Start Both Servers

bash
# Terminal 1: Start Backend Server
cd /mnt/f/tracverse/server
npm run dev

# Terminal 2: Start Frontend Server
cd /mnt/f/tracverse/server/frontend
npm run dev


Expected Output:
‚Ä¢ Backend: Server running on port 3000
‚Ä¢ Frontend: Ready on http://localhost:3001

## üì± Step 2: Test Authentication Flow

### **2.1 Register New Account**
1. Open browser: http://localhost:3001
2. Should redirect to login page automatically
3. Click "Sign up" link at bottom
4. Fill registration form:
   ‚Ä¢ Email: your-email@example.com
   ‚Ä¢ Password: TestPass123 (must have uppercase, lowercase, number)
   ‚Ä¢ Confirm Password: TestPass123
   ‚Ä¢ Sponsor Code: (leave empty or use existing user's code)
5. Click "Create Account"
6. Expected: Green success message ‚Üí auto-redirect to login

### **2.2 Login to Dashboard**
1. Fill login form:
   ‚Ä¢ Email: your-email@example.com
   ‚Ä¢ Password: TestPass123
2. Click "Sign In"
3. Expected: Redirect to dashboard with your data

## üìä Step 3: Test Dashboard Features

### **3.1 Desktop View**
‚Ä¢ **Sidebar**: Should show 6 navigation items
‚Ä¢ **Metrics Cards**: Should display your real data (initially $0.00, 0 team members)
‚Ä¢ **Quick Actions**: 3 clickable buttons
‚Ä¢ **Recent Activity**: Shows your current status

### **3.2 Mobile View**
1. Resize browser to mobile width (< 768px)
2. Hamburger menu: Should appear in top-left
3. Click hamburger: Sidebar slides in from left
4. Click outside: Sidebar closes
5. Touch targets: All buttons should be ‚â•44px

## üîó Step 4: Test Backend Integration

### **4.1 Generate Marketing URL**
1. Open browser dev tools (F12)
2. Go to Console tab
3. Run this code:
javascript
fetch('http://localhost:3000/api/generate-url', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
  },
  body: JSON.stringify({
    base_url: 'https://example.com',
    platform: 'web'
  })
})
.then(r => r.json())
.then(data => console.log('Generated URL:', data.modified_url));

4. Expected: See tracking URL with UTM parameters

### **4.2 Check Your Profile Data**
javascript
fetch('http://localhost:3000/api/users/profile', {
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
  }
})
.then(r => r.json())
.then(data => console.log('Your Profile:', data));


## üß™ Step 5: Test Error Handling

### **5.1 Invalid Login**
1. Go to login page: http://localhost:3001/login
2. Enter wrong credentials:
   ‚Ä¢ Email: wrong@example.com
   ‚Ä¢ Password: wrongpass
3. Expected: Red error message appears

### **5.2 Weak Password Registration**
1. Go to register page: http://localhost:3001/register
2. Try weak password: 123
3. Expected: Error about password requirements

## üì± Step 6: Mobile Testing Checklist

### **Touch & Gestures**
‚Ä¢ [ ] All buttons are ‚â•44px (use browser inspector)
‚Ä¢ [ ] Hamburger menu opens/closes smoothly
‚Ä¢ [ ] Forms are easy to fill on mobile
‚Ä¢ [ ] No horizontal scrolling on mobile
‚Ä¢ [ ] Text is readable without zooming

### **Responsive Design**
‚Ä¢ [ ] Sidebar hidden on mobile, visible on desktop
‚Ä¢ [ ] Metrics cards stack vertically on mobile
‚Ä¢ [ ] Login/register forms fit mobile screen
‚Ä¢ [ ] All text is legible on small screens

## üîç Step 7: Browser Developer Tools Testing

### **Network Tab**
1. Open Dev Tools ‚Üí Network tab
2. Refresh dashboard
3. Check API calls:
   ‚Ä¢ GET /api/users/profile ‚Üí 200 OK
   ‚Ä¢ GET /api/commissions ‚Üí 200 OK
   ‚Ä¢ GET /api/referrals ‚Üí 200 OK

### **Console Tab**
‚Ä¢ **No red errors** should appear
‚Ä¢ **Authentication token** should be stored
‚Ä¢ **API responses** should be successful

## ‚úÖ Expected Results Summary

| Feature | Expected Behavior |
|---------|------------------|
| Registration | Success message ‚Üí redirect to login |
| Login | Token stored ‚Üí redirect to dashboard |
| Dashboard | Real data loaded from backend |
| Mobile Menu | Hamburger opens/closes sidebar |
| API Calls | All return 200 status codes |
| Error Handling | Clear error messages shown |
| Logout | Token cleared ‚Üí redirect to login |

## üö® Common Issues & Solutions

### **"Cannot connect to backend"**
‚Ä¢ Check backend server is running on port 3000
‚Ä¢ Verify NEXT_PUBLIC_API_URL=http://localhost:3000/api in .env.local

### **"Token invalid" errors**
‚Ä¢ Clear browser storage: localStorage.clear()
‚Ä¢ Re-register and login

### **Mobile menu not working**
‚Ä¢ Check browser width is < 768px
‚Ä¢ Ensure JavaScript is enabled

## üéØ Success Criteria

‚úÖ You should be able to:
1. Register a new account
2. Login successfully
3. See dashboard with real backend data
4. Use mobile hamburger menu
5. Navigate between pages
6. Logout and login again
7. See proper error messages for invalid inputs

If all these work, the implementation is successful! üéâ

>